{"ast":null,"code":"var _jsxFileName = \"D:\\\\3-2\\\\IOT\\\\IOTLAB\\\\react-web-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const cards = [{\n    id: 1,\n    arduinoCode: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`,\n    raspberryPiCode: `import RPi.GPIO as GPIO\nimport time\n\nTRIG_PIN = 23\nECHO_PIN = 24\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(TRIG_PIN, GPIO.OUT)\nGPIO.setup(ECHO_PIN, GPIO.IN)\n\ndef get_distance():\n    GPIO.output(TRIG_PIN, False)\n    time.sleep(0.2)\n    GPIO.output(TRIG_PIN, True)\n    time.sleep(0.00001)\n    GPIO.output(TRIG_PIN, False)\n\n    while GPIO.input(ECHO_PIN) == 0:\n        pulse_start = time.time()\n\n    while GPIO.input(ECHO_PIN) == 1:\n        pulse_end = time.time()\n\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    distance = round(distance, 2)\n    return distance\n\ntry:\n    while True:\n        dist = get_distance()\n        print(f\"Distance: {dist} cm\")\n        time.sleep(1)\nexcept:\n    GPIO.cleanup()`\n  }, {\n    id: 2,\n    arduinoCode: \"void loop() {\\n  digitalWrite(13, HIGH);\\n  delay(1000);\\n}\",\n    raspberryPiCode: \"GPIO.setup(18, GPIO.OUT)\\nGPIO.output(18, GPIO.HIGH)\"\n  }, {\n    id: 3,\n    arduinoCode: \"int sensorValue = analogRead(A0);\\nSerial.println(sensorValue);\",\n    raspberryPiCode: \"from gpiozero import LED\\nled = LED(17)\\nled.on()\"\n  }, {\n    id: 4,\n    arduinoCode: \"if (Serial.available() > 0) {\\n  int data = Serial.read();\\n}\",\n    raspberryPiCode: \"import time\\ntime.sleep(1)\\nGPIO.cleanup()\"\n  }, {\n    id: 5,\n    arduinoCode: \"#include <Servo.h>\\nServo myservo;\\nmyservo.write(90);\",\n    raspberryPiCode: \"from gpiozero import Servo\\nservo = Servo(17)\\nservo.mid()\"\n  }];\n  const handleCopy = text => {\n    navigator.clipboard.writeText(text);\n    alert(\"Code copied!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-section arduino\",\n        onClick: () => handleCopy(card.arduinoCode),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: card.id === 1 ? 'Arduino (Ultrasonic Sensor)' : 'Arduino'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: card.arduinoCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-section raspberry-pi\",\n        onClick: () => handleCopy(card.raspberryPiCode),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: card.id === 1 ? 'Raspberry Pi (Ultrasonic Sensor)' : 'Raspberry Pi'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: card.raspberryPiCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","cards","id","arduinoCode","raspberryPiCode","handleCopy","text","navigator","clipboard","writeText","alert","className","children","map","card","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/3-2/IOT/IOTLAB/react-web-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const cards = [\n    {\n      id: 1,\n      arduinoCode: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`,\n      raspberryPiCode: `import RPi.GPIO as GPIO\nimport time\n\nTRIG_PIN = 23\nECHO_PIN = 24\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(TRIG_PIN, GPIO.OUT)\nGPIO.setup(ECHO_PIN, GPIO.IN)\n\ndef get_distance():\n    GPIO.output(TRIG_PIN, False)\n    time.sleep(0.2)\n    GPIO.output(TRIG_PIN, True)\n    time.sleep(0.00001)\n    GPIO.output(TRIG_PIN, False)\n\n    while GPIO.input(ECHO_PIN) == 0:\n        pulse_start = time.time()\n\n    while GPIO.input(ECHO_PIN) == 1:\n        pulse_end = time.time()\n\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    distance = round(distance, 2)\n    return distance\n\ntry:\n    while True:\n        dist = get_distance()\n        print(f\"Distance: {dist} cm\")\n        time.sleep(1)\nexcept:\n    GPIO.cleanup()`\n    },\n    {\n      id: 2,\n      arduinoCode: \"void loop() {\\n  digitalWrite(13, HIGH);\\n  delay(1000);\\n}\",\n      raspberryPiCode: \"GPIO.setup(18, GPIO.OUT)\\nGPIO.output(18, GPIO.HIGH)\"\n    },\n    {\n      id: 3,\n      arduinoCode: \"int sensorValue = analogRead(A0);\\nSerial.println(sensorValue);\",\n      raspberryPiCode: \"from gpiozero import LED\\nled = LED(17)\\nled.on()\"\n    },\n    {\n      id: 4,\n      arduinoCode: \"if (Serial.available() > 0) {\\n  int data = Serial.read();\\n}\",\n      raspberryPiCode: \"import time\\ntime.sleep(1)\\nGPIO.cleanup()\"\n    },\n    {\n      id: 5,\n      arduinoCode: \"#include <Servo.h>\\nServo myservo;\\nmyservo.write(90);\",\n      raspberryPiCode: \"from gpiozero import Servo\\nservo = Servo(17)\\nservo.mid()\"\n    }\n  ];\n\n  const handleCopy = (text) => {\n    navigator.clipboard.writeText(text);\n    alert(\"Code copied!\");\n  };\n\n  return (\n    <div className=\"app\">\n      {cards.map((card) => (\n        <div key={card.id} className=\"card\">\n          <div\n            className=\"card-section arduino\"\n            onClick={() => handleCopy(card.arduinoCode)}\n          >\n            <h2>{card.id === 1 ? 'Arduino (Ultrasonic Sensor)' : 'Arduino'}</h2>\n            <pre><code>{card.arduinoCode}</code></pre>\n          </div>\n          <div\n            className=\"card-section raspberry-pi\"\n            onClick={() => handleCopy(card.raspberryPiCode)}\n          >\n            <h2>{card.id === 1 ? 'Raspberry Pi (Ultrasonic Sensor)' : 'Raspberry Pi'}</h2>\n            <pre><code>{card.raspberryPiCode}</code></pre>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,KAAK,GAAG,CACZ;IACEC,EAAE,EAAE,CAAC;IACLC,WAAW,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;IACIC,eAAe,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,WAAW,EAAE,6DAA6D;IAC1EC,eAAe,EAAE;EACnB,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,WAAW,EAAE,iEAAiE;IAC9EC,eAAe,EAAE;EACnB,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,WAAW,EAAE,+DAA+D;IAC5EC,eAAe,EAAE;EACnB,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,WAAW,EAAE,wDAAwD;IACrEC,eAAe,EAAE;EACnB,CAAC,CACF;EAED,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3BC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC;IACnCI,KAAK,CAAC,cAAc,CAAC;EACvB,CAAC;EAED,oBACEX,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBX,KAAK,CAACY,GAAG,CAAEC,IAAI,iBACdf,OAAA;MAAmBY,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACjCb,OAAA;QACEY,SAAS,EAAC,sBAAsB;QAChCI,OAAO,EAAEA,CAAA,KAAMV,UAAU,CAACS,IAAI,CAACX,WAAW,CAAE;QAAAS,QAAA,gBAE5Cb,OAAA;UAAAa,QAAA,EAAKE,IAAI,CAACZ,EAAE,KAAK,CAAC,GAAG,6BAA6B,GAAG;QAAS;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACpEpB,OAAA;UAAAa,QAAA,eAAKb,OAAA;YAAAa,QAAA,EAAOE,IAAI,CAACX;UAAW;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACNpB,OAAA;QACEY,SAAS,EAAC,2BAA2B;QACrCI,OAAO,EAAEA,CAAA,KAAMV,UAAU,CAACS,IAAI,CAACV,eAAe,CAAE;QAAAQ,QAAA,gBAEhDb,OAAA;UAAAa,QAAA,EAAKE,IAAI,CAACZ,EAAE,KAAK,CAAC,GAAG,kCAAkC,GAAG;QAAc;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC9EpB,OAAA;UAAAa,QAAA,eAAKb,OAAA;YAAAa,QAAA,EAAOE,IAAI,CAACV;UAAe;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA,GAdEL,IAAI,CAACZ,EAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAeZ,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GA1JIpB,GAAG;AA4JT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}