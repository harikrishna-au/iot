{"ast":null,"code":"var _jsxFileName = \"D:\\\\3-2\\\\IOT\\\\IOTLAB\\\\react-web-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const arduinoCards = [{\n    id: 1,\n    title: \"UltraSonic\",\n    code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n  }, {\n    id: 2,\n    title: \"DHT11\",\n    code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n#include \"DHT.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define DHTPIN 4\n#define DHTTYPE DHT11\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n    Serial.begin(115200);\n    dht.begin();\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    float h = dht.readHumidity();\n    float t = dht.readTemperature();\n\n    if (isnan(h) || isnan(t)) {\n        Serial.println(\"Failed to read from DHT sensor!\");\n        delay(2000);\n        return;\n    }\n\n    Serial.print(\"Humidity: \");\n    Serial.print(h);\n    Serial.print(\" %\\t\");\n    Serial.print(\"Temperature: \");\n    Serial.println(t);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, h);\n    ThingSpeak.setField(2, t);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n  }, {\n    id: 3,\n    title: \"Soil Moisture \",\n    code: `#include <WiFi.h>\n#include <AsyncTCP.h>\n#include <ESPAsyncWebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJOC20483\";\n\nint sensorPin = 36;\nconst int redPin = 23;\nconst int greenPin = 22;\nconst int bluePin = 21;\n\nAsyncWebServer server(80);\n\nString getMoistureData() {\n  int sensorValue = analogRead(sensorPin);\n  int moisturePercent = map(sensorValue, 4095, 1000, 0, 100);\n  \n  String color = \"none\";\n  String status = \"unknown\";\n\n  if (moisturePercent < 10) {\n    color = \"red\";\n    status = \"Dry\";\n    digitalWrite(redPin, HIGH);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, LOW);\n  } else if (moisturePercent > 10 && moisturePercent < 50) {\n    color = \"blue\";\n    status = \"Moderate\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, HIGH);\n  } else if (moisturePercent >= 50) {\n    color = \"green\";\n    status = \"Wet\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, HIGH);\n    digitalWrite(bluePin, LOW);\n  }\n\n  String response = \"<h1>Soil Moisture: \" + String(moisturePercent) + \"% (\" + status + \")</h1>\";\n  response += \"<div style='width: 100%; height:100px; background-color:\" + color + \"'></div>\";\n  \n  return response;\n}\n\nvoid setup() {\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  Serial.begin(115200);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"Connected to WiFi\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", HTTP_GET, [](AsyncWebServerRequest *request){\n    String html = \"<html><head><meta http-equiv='refresh' content='5'></head><body>\";\n    html += getMoistureData();\n    html += \"</body></html>\";\n    request->send(200, \"text/html\", html);\n  });\n\n  server.begin();\n}\n\nvoid loop() {}`\n  }, {\n    id: 4,\n    title: \"LED Web Server\",\n    code: `#include <WiFi.h>\n#include <WebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJDC2408\";\n\nWebServer server(80);\n\nconst int ledPins[] = {13, 12, 14, 25};\nconst int numLeds = 4;\n\nvoid setupPins() {\n  for (int i = 0; i < numLeds; i++) {\n    pinMode(ledPins[i], OUTPUT);\n    digitalWrite(ledPins[i], LOW);\n  }\n}\n\nvoid handleRoot() {\n  String html = \"<h1>ESP32 LED Control</h1>\";\n  for (int i = 0; i < numLeds; i++) {\n    html += \"LED\" + String(ledPins[i]) + \": \";\n    html += \"<a href=\\\"/on?pin=\" + String(ledPins[i]) + \"\\\"><button>ON</button></a>\";\n    html += \"<a href=\\\"/off?pin=\" + String(ledPins[i]) + \"\\\"><button>OFF</button></a><br><br>\";\n  }\n  server.send(200, \"text/html\", html);\n}\n\nvoid handleLEDOn() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, HIGH);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is ON.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid handleLEDOff() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, LOW);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is OFF.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  setupPins();\n\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to Wi-Fi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nConnected to Wi-Fi.\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", handleRoot);\n  server.on(\"/on\", handleLEDOn);\n  server.on(\"/off\", handleLEDOff);\n\n  server.begin();\n  Serial.println(\"HTTP server started.\");\n}\n\nvoid loop() {\n  server.handleClient();\n}`\n  }, {\n    id: 5,\n    title: \"Digital Write\",\n    type: \"arduino\",\n    code: \"digitalWrite(7, HIGH);\"\n  },\n  // Raspberry Pi Cards\n  {\n    id: \"p1\",\n    title: \"Ultrasonic Sensor\",\n    type: \"raspberry-pi\",\n    code: `import RPi.GPIO as GPIO...`\n  }, {\n    id: \"p2\",\n    title: \"LED Control\",\n    type: \"raspberry-pi\",\n    code: \"from gpiozero import LED\"\n  }, {\n    id: \"p3\",\n    title: \"Button Input\",\n    code: \"from gpiozero import Button\\nbutton = Button(2)\\nbutton.wait_for_press()\"\n  }, {\n    id: 4,\n    title: \"PWM Output\",\n    code: \"import RPi.GPIO as GPIO\\nGPIO.setmode(GPIO.BCM)\\nGPIO.setup(18, GPIO.OUT)\\npwm = GPIO.PWM(18, 100)\"\n  }, {\n    id: 5,\n    title: \"Servo Motar\",\n    code: `from flask import Flask, render_template, request\nimport RPi.GPIO as GPIO\nimport time\n\napp = Flask(_name_)\n\nservo_pin = 18\nfrequency_hz = 50\nmin_duty = 2.5\nmax_duty = 12.5\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(servo_pin, GPIO.OUT)\n\npwm = GPIO.PWM(servo_pin, frequency_hz)\npwm.start(0)\n\ndef set_angle(angle):\n    duty_cycle = min_duty + (angle / 180.0) * (max_duty - min_duty)\n    pwm.ChangeDutyCycle(duty_cycle)\n    time.sleep(0.5)\n    pwm.ChangeDutyCycle(0)\n\n@app.route('/')\ndef index():\n    return render_template(\"index.html\")\n\n@app.route('/control', methods=['POST'])\ndef control():\n    try:\n        angle = float(request.form['angle'])\n        if 0 <= angle <= 180:\n            set_angle(angle)\n            return f\"Servo moved to {angle} degrees\"\n        else:\n            return \"Invalid angle! Enter a value between 0 and 180.\", 400\n    except ValueError:\n        return \"Invalid input! Please enter a number.\", 400\n\n@app.route('/cleanup')\ndef cleanup():\n    pwm.stop()\n    GPIO.cleanup()\n    return \"PWM stopped and GPIO cleaned up.\"\n\nif _name_ == '_main_':\n    try:\n        app.run(host='0.0.0.0', port=5000)\n    except KeyboardInterrupt:\n        print(\"Program terminated by user.\")\n    finally:\n        pwm.stop()\n        GPIO.cleanup()`\n  }];\n  const handleCopy = text => {\n    navigator.clipboard.writeText(text);\n    alert(\"Code copied to clipboard!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"row-title\",\n        children: \"Arduino\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-row\",\n        children: arduinoCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card arduino\",\n          onClick: () => handleCopy(card.code),\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: card.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"row-title\",\n        children: \"Raspberry Pi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-row\",\n        children: piCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card raspberry-pi\",\n          onClick: () => handleCopy(card.code),\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: card.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","arduinoCards","id","title","code","type","handleCopy","text","navigator","clipboard","writeText","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","onClick","piCards","_c","$RefreshReg$"],"sources":["D:/3-2/IOT/IOTLAB/react-web-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const arduinoCards = [\n    {\n      id: 1,\n      title: \"UltraSonic\",\n      code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n    },\n    {\n      id: 2,\n      title: \"DHT11\",\n      code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n#include \"DHT.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define DHTPIN 4\n#define DHTTYPE DHT11\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n    Serial.begin(115200);\n    dht.begin();\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    float h = dht.readHumidity();\n    float t = dht.readTemperature();\n\n    if (isnan(h) || isnan(t)) {\n        Serial.println(\"Failed to read from DHT sensor!\");\n        delay(2000);\n        return;\n    }\n\n    Serial.print(\"Humidity: \");\n    Serial.print(h);\n    Serial.print(\" %\\t\");\n    Serial.print(\"Temperature: \");\n    Serial.println(t);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, h);\n    ThingSpeak.setField(2, t);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n    },\n    {\n      id: 3,\n      title: \"Soil Moisture \",\n      code: `#include <WiFi.h>\n#include <AsyncTCP.h>\n#include <ESPAsyncWebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJOC20483\";\n\nint sensorPin = 36;\nconst int redPin = 23;\nconst int greenPin = 22;\nconst int bluePin = 21;\n\nAsyncWebServer server(80);\n\nString getMoistureData() {\n  int sensorValue = analogRead(sensorPin);\n  int moisturePercent = map(sensorValue, 4095, 1000, 0, 100);\n  \n  String color = \"none\";\n  String status = \"unknown\";\n\n  if (moisturePercent < 10) {\n    color = \"red\";\n    status = \"Dry\";\n    digitalWrite(redPin, HIGH);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, LOW);\n  } else if (moisturePercent > 10 && moisturePercent < 50) {\n    color = \"blue\";\n    status = \"Moderate\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, HIGH);\n  } else if (moisturePercent >= 50) {\n    color = \"green\";\n    status = \"Wet\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, HIGH);\n    digitalWrite(bluePin, LOW);\n  }\n\n  String response = \"<h1>Soil Moisture: \" + String(moisturePercent) + \"% (\" + status + \")</h1>\";\n  response += \"<div style='width: 100%; height:100px; background-color:\" + color + \"'></div>\";\n  \n  return response;\n}\n\nvoid setup() {\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  Serial.begin(115200);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"Connected to WiFi\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", HTTP_GET, [](AsyncWebServerRequest *request){\n    String html = \"<html><head><meta http-equiv='refresh' content='5'></head><body>\";\n    html += getMoistureData();\n    html += \"</body></html>\";\n    request->send(200, \"text/html\", html);\n  });\n\n  server.begin();\n}\n\nvoid loop() {}`\n    },\n    {\n      id: 4,\n      title: \"LED Web Server\",\n      code: `#include <WiFi.h>\n#include <WebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJDC2408\";\n\nWebServer server(80);\n\nconst int ledPins[] = {13, 12, 14, 25};\nconst int numLeds = 4;\n\nvoid setupPins() {\n  for (int i = 0; i < numLeds; i++) {\n    pinMode(ledPins[i], OUTPUT);\n    digitalWrite(ledPins[i], LOW);\n  }\n}\n\nvoid handleRoot() {\n  String html = \"<h1>ESP32 LED Control</h1>\";\n  for (int i = 0; i < numLeds; i++) {\n    html += \"LED\" + String(ledPins[i]) + \": \";\n    html += \"<a href=\\\"/on?pin=\" + String(ledPins[i]) + \"\\\"><button>ON</button></a>\";\n    html += \"<a href=\\\"/off?pin=\" + String(ledPins[i]) + \"\\\"><button>OFF</button></a><br><br>\";\n  }\n  server.send(200, \"text/html\", html);\n}\n\nvoid handleLEDOn() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, HIGH);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is ON.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid handleLEDOff() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, LOW);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is OFF.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  setupPins();\n\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to Wi-Fi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nConnected to Wi-Fi.\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", handleRoot);\n  server.on(\"/on\", handleLEDOn);\n  server.on(\"/off\", handleLEDOff);\n\n  server.begin();\n  Serial.println(\"HTTP server started.\");\n}\n\nvoid loop() {\n  server.handleClient();\n}`\n    },\n    {\n      id: 5,\n      title: \"Digital Write\",\n      type: \"arduino\",\n      code: \"digitalWrite(7, HIGH);\"\n    },\n    // Raspberry Pi Cards\n    {\n      id: \"p1\",\n      title: \"Ultrasonic Sensor\",\n      type: \"raspberry-pi\",\n      code: `import RPi.GPIO as GPIO...`\n    },\n    {\n      id: \"p2\",\n      title: \"LED Control\",\n      type: \"raspberry-pi\",\n      code: \"from gpiozero import LED\"\n    },\n    {\n      id: \"p3\",\n      title: \"Button Input\",\n      code: \"from gpiozero import Button\\nbutton = Button(2)\\nbutton.wait_for_press()\"\n    },\n    {\n      id: 4,\n      title: \"PWM Output\",\n      code: \"import RPi.GPIO as GPIO\\nGPIO.setmode(GPIO.BCM)\\nGPIO.setup(18, GPIO.OUT)\\npwm = GPIO.PWM(18, 100)\"\n    },\n    {\n      id: 5,\n      title: \"Servo Motar\",\n      code:  `from flask import Flask, render_template, request\nimport RPi.GPIO as GPIO\nimport time\n\napp = Flask(_name_)\n\nservo_pin = 18\nfrequency_hz = 50\nmin_duty = 2.5\nmax_duty = 12.5\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(servo_pin, GPIO.OUT)\n\npwm = GPIO.PWM(servo_pin, frequency_hz)\npwm.start(0)\n\ndef set_angle(angle):\n    duty_cycle = min_duty + (angle / 180.0) * (max_duty - min_duty)\n    pwm.ChangeDutyCycle(duty_cycle)\n    time.sleep(0.5)\n    pwm.ChangeDutyCycle(0)\n\n@app.route('/')\ndef index():\n    return render_template(\"index.html\")\n\n@app.route('/control', methods=['POST'])\ndef control():\n    try:\n        angle = float(request.form['angle'])\n        if 0 <= angle <= 180:\n            set_angle(angle)\n            return f\"Servo moved to {angle} degrees\"\n        else:\n            return \"Invalid angle! Enter a value between 0 and 180.\", 400\n    except ValueError:\n        return \"Invalid input! Please enter a number.\", 400\n\n@app.route('/cleanup')\ndef cleanup():\n    pwm.stop()\n    GPIO.cleanup()\n    return \"PWM stopped and GPIO cleaned up.\"\n\nif _name_ == '_main_':\n    try:\n        app.run(host='0.0.0.0', port=5000)\n    except KeyboardInterrupt:\n        print(\"Program terminated by user.\")\n    finally:\n        pwm.stop()\n        GPIO.cleanup()`\n    }\n  ];\n\n  const handleCopy = (text) => {\n    navigator.clipboard.writeText(text);\n    alert(\"Code copied to clipboard!\");\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h2 className=\"row-title\">Arduino</h2>\n        <div className=\"cards-row\">\n          {arduinoCards.map((card) => (\n            <div key={card.id} className=\"card arduino\" onClick={() => handleCopy(card.code)}>\n              <h3>{card.title}</h3>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"row\">\n        <h2 className=\"row-title\">Raspberry Pi</h2>\n        <div className=\"cards-row\">\n          {piCards.map((card) => (\n            <div key={card.id} className=\"card raspberry-pi\" onClick={() => handleCopy(card.code)}>\n              <h3>{card.title}</h3>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,YAAY,GAAG,CACnB;IACEC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,YAAY;IACnBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,gBAAgB;IACvBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,gBAAgB;IACvBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,eAAe;IACtBE,IAAI,EAAE,SAAS;IACfD,IAAI,EAAE;EACR,CAAC;EACD;EACA;IACEF,EAAE,EAAE,IAAI;IACRC,KAAK,EAAE,mBAAmB;IAC1BE,IAAI,EAAE,cAAc;IACpBD,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,IAAI;IACRC,KAAK,EAAE,aAAa;IACpBE,IAAI,EAAE,cAAc;IACpBD,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,IAAI;IACRC,KAAK,EAAE,cAAc;IACrBC,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,YAAY;IACnBC,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,IAAI,EAAG;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CACF;EAED,MAAME,UAAU,GAAIC,IAAI,IAAK;IAC3BC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC;IACnCI,KAAK,CAAC,2BAA2B,CAAC;EACpC,CAAC;EAED,oBACEZ,OAAA;IAAKa,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBd,OAAA;MAAKa,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBd,OAAA;QAAIa,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtClB,OAAA;QAAKa,SAAS,EAAC,WAAW;QAAAC,QAAA,EACvBZ,YAAY,CAACiB,GAAG,CAAEC,IAAI,iBACrBpB,OAAA;UAAmBa,SAAS,EAAC,cAAc;UAACQ,OAAO,EAAEA,CAAA,KAAMd,UAAU,CAACa,IAAI,CAACf,IAAI,CAAE;UAAAS,QAAA,eAC/Ed,OAAA;YAAAc,QAAA,EAAKM,IAAI,CAAChB;UAAK;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC,GADbE,IAAI,CAACjB,EAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNlB,OAAA;MAAKa,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBd,OAAA;QAAIa,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3ClB,OAAA;QAAKa,SAAS,EAAC,WAAW;QAAAC,QAAA,EACvBQ,OAAO,CAACH,GAAG,CAAEC,IAAI,iBAChBpB,OAAA;UAAmBa,SAAS,EAAC,mBAAmB;UAACQ,OAAO,EAAEA,CAAA,KAAMd,UAAU,CAACa,IAAI,CAACf,IAAI,CAAE;UAAAS,QAAA,eACpFd,OAAA;YAAAc,QAAA,EAAKM,IAAI,CAAChB;UAAK;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC,GADbE,IAAI,CAACjB,EAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACK,EAAA,GA1ZItB,GAAG;AA4ZT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}