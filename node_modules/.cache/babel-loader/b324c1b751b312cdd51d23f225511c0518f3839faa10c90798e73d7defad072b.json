{"ast":null,"code":"var _jsxFileName = \"D:\\\\3-2\\\\IOT\\\\IOTLAB\\\\react-web-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const arduinoCards = [{\n    id: \"a1\",\n    title: \"ultrasonic\",\n    code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n  }, {\n    id: \"a2\",\n    title: \"dht11\",\n    code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n#include \"DHT.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define DHTPIN 4\n#define DHTTYPE DHT11\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n    Serial.begin(115200);\n    dht.begin();\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    float h = dht.readHumidity();\n    float t = dht.readTemperature();\n\n    if (isnan(h) || isnan(t)) {\n        Serial.println(\"Failed to read from DHT sensor!\");\n        delay(2000);\n        return;\n    }\n\n    Serial.print(\"Humidity: \");\n    Serial.print(h);\n    Serial.print(\" %\\t\");\n    Serial.print(\"Temperature: \");\n    Serial.println(t);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, h);\n    ThingSpeak.setField(2, t);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n  }, {\n    id: \"a3\",\n    title: \"servomotar\",\n    code: \"...\"\n  }, {\n    id: \"a4\",\n    title: \"rgb\",\n    code: `#include <WiFi.h>\n#include <WebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJDC2408\";\n\nWebServer server(80);\n\nconst int ledPins[] = {13, 12, 14, 25};\nconst int numLeds = 4;\n\nvoid setupPins() {\n  for (int i = 0; i < numLeds; i++) {\n    pinMode(ledPins[i], OUTPUT);\n    digitalWrite(ledPins[i], LOW);\n  }\n}\n\nvoid handleRoot() {\n  String html = \"<h1>ESP32 LED Control</h1>\";\n  for (int i = 0; i < numLeds; i++) {\n    html += \"LED\" + String(ledPins[i]) + \": \";\n    html += \"<a href=\\\"/on?pin=\" + String(ledPins[i]) + \"\\\"><button>ON</button></a>\";\n    html += \"<a href=\\\"/off?pin=\" + String(ledPins[i]) + \"\\\"><button>OFF</button></a><br><br>\";\n  }\n  server.send(200, \"text/html\", html);\n}\n\nvoid handleLEDOn() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, HIGH);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is ON.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid handleLEDOff() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, LOW);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is OFF.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  setupPins();\n\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to Wi-Fi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nConnected to Wi-Fi.\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", handleRoot);\n  server.on(\"/on\", handleLEDOn);\n  server.on(\"/off\", handleLEDOff);\n\n  server.begin();\n  Serial.println(\"HTTP server started.\");\n}\n\nvoid loop() {\n  server.handleClient();\n}`\n  }, {\n    id: \"a5\",\n    title: \"soilmoisture\",\n    code: `#include <WiFi.h>\n#include <AsyncTCP.h>\n#include <ESPAsyncWebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJOC20483\";\n\nint sensorPin = 36;\nconst int redPin = 23;\nconst int greenPin = 22;\nconst int bluePin = 21;\n\nAsyncWebServer server(80);\n\nString getMoistureData() {\n  int sensorValue = analogRead(sensorPin);\n  int moisturePercent = map(sensorValue, 4095, 1000, 0, 100);\n  \n  String color = \"none\";\n  String status = \"unknown\";\n\n  if (moisturePercent < 10) {\n    color = \"red\";\n    status = \"Dry\";\n    digitalWrite(redPin, HIGH);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, LOW);\n  } else if (moisturePercent > 10 && moisturePercent < 50) {\n    color = \"blue\";\n    status = \"Moderate\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, HIGH);\n  } else if (moisturePercent >= 50) {\n    color = \"green\";\n    status = \"Wet\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, HIGH);\n    digitalWrite(bluePin, LOW);\n  }\n\n  String response = \"<h1>Soil Moisture: \" + String(moisturePercent) + \"% (\" + status + \")</h1>\";\n  response += \"<div style='width: 100%; height:100px; background-color:\" + color + \"'></div>\";\n  \n  return response;\n}\n\nvoid setup() {\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  Serial.begin(115200);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"Connected to WiFi\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", HTTP_GET, [](AsyncWebServerRequest *request){\n    String html = \"<html><head><meta http-equiv='refresh' content='5'></head><body>\";\n    html += getMoistureData();\n    html += \"</body></html>\";\n    request->send(200, \"text/html\", html);\n  });\n\n  server.begin();\n}\n\nvoid loop() {}`\n  }];\n  const piCards = [{\n    id: \"p1\",\n    title: \"ultrasonic\",\n    code: `import RPi.GPIO as GPIO...`\n  }, {\n    id: \"p2\",\n    title: \"dht11\",\n    code: \"from gpiozero import LED\"\n  }, {\n    id: \"p3\",\n    title: \"servomotar\",\n    code: \"from gpiozero import Button\"\n  }, {\n    id: \"p4\",\n    title: \"rgb\",\n    code: \"import RPi.GPIO as GPIO\"\n  }, {\n    id: \"p5\",\n    title: \"soilmoisture\",\n    code: \"...\"\n  }];\n  const handleCopy = text => {\n    navigator.clipboard.writeText(text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pi-group\",\n        children: piCards.map(card => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"card\",\n          onClick: () => handleCopy(card.code),\n          children: card.title\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arduino-group\",\n        children: arduinoCards.map(card => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"card\",\n          onClick: () => handleCopy(card.code),\n          children: card.title\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","arduinoCards","id","title","code","piCards","handleCopy","text","navigator","clipboard","writeText","className","children","map","card","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/3-2/IOT/IOTLAB/react-web-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const arduinoCards = [\n    { id: \"a1\", title: \"ultrasonic\", code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}` },\n    { id: \"a2\", title: \"dht11\", code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n#include \"DHT.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define DHTPIN 4\n#define DHTTYPE DHT11\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n    Serial.begin(115200);\n    dht.begin();\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    float h = dht.readHumidity();\n    float t = dht.readTemperature();\n\n    if (isnan(h) || isnan(t)) {\n        Serial.println(\"Failed to read from DHT sensor!\");\n        delay(2000);\n        return;\n    }\n\n    Serial.print(\"Humidity: \");\n    Serial.print(h);\n    Serial.print(\" %\\t\");\n    Serial.print(\"Temperature: \");\n    Serial.println(t);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, h);\n    ThingSpeak.setField(2, t);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}` },\n    { id: \"a3\", title: \"servomotar\", code: \"...\" },\n    { id: \"a4\", title: \"rgb\", code: `#include <WiFi.h>\n#include <WebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJDC2408\";\n\nWebServer server(80);\n\nconst int ledPins[] = {13, 12, 14, 25};\nconst int numLeds = 4;\n\nvoid setupPins() {\n  for (int i = 0; i < numLeds; i++) {\n    pinMode(ledPins[i], OUTPUT);\n    digitalWrite(ledPins[i], LOW);\n  }\n}\n\nvoid handleRoot() {\n  String html = \"<h1>ESP32 LED Control</h1>\";\n  for (int i = 0; i < numLeds; i++) {\n    html += \"LED\" + String(ledPins[i]) + \": \";\n    html += \"<a href=\\\"/on?pin=\" + String(ledPins[i]) + \"\\\"><button>ON</button></a>\";\n    html += \"<a href=\\\"/off?pin=\" + String(ledPins[i]) + \"\\\"><button>OFF</button></a><br><br>\";\n  }\n  server.send(200, \"text/html\", html);\n}\n\nvoid handleLEDOn() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, HIGH);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is ON.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid handleLEDOff() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, LOW);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is OFF.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  setupPins();\n\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to Wi-Fi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nConnected to Wi-Fi.\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", handleRoot);\n  server.on(\"/on\", handleLEDOn);\n  server.on(\"/off\", handleLEDOff);\n\n  server.begin();\n  Serial.println(\"HTTP server started.\");\n}\n\nvoid loop() {\n  server.handleClient();\n}` },\n    { id: \"a5\", title: \"soilmoisture\", code: `#include <WiFi.h>\n#include <AsyncTCP.h>\n#include <ESPAsyncWebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJOC20483\";\n\nint sensorPin = 36;\nconst int redPin = 23;\nconst int greenPin = 22;\nconst int bluePin = 21;\n\nAsyncWebServer server(80);\n\nString getMoistureData() {\n  int sensorValue = analogRead(sensorPin);\n  int moisturePercent = map(sensorValue, 4095, 1000, 0, 100);\n  \n  String color = \"none\";\n  String status = \"unknown\";\n\n  if (moisturePercent < 10) {\n    color = \"red\";\n    status = \"Dry\";\n    digitalWrite(redPin, HIGH);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, LOW);\n  } else if (moisturePercent > 10 && moisturePercent < 50) {\n    color = \"blue\";\n    status = \"Moderate\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, HIGH);\n  } else if (moisturePercent >= 50) {\n    color = \"green\";\n    status = \"Wet\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, HIGH);\n    digitalWrite(bluePin, LOW);\n  }\n\n  String response = \"<h1>Soil Moisture: \" + String(moisturePercent) + \"% (\" + status + \")</h1>\";\n  response += \"<div style='width: 100%; height:100px; background-color:\" + color + \"'></div>\";\n  \n  return response;\n}\n\nvoid setup() {\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  Serial.begin(115200);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"Connected to WiFi\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", HTTP_GET, [](AsyncWebServerRequest *request){\n    String html = \"<html><head><meta http-equiv='refresh' content='5'></head><body>\";\n    html += getMoistureData();\n    html += \"</body></html>\";\n    request->send(200, \"text/html\", html);\n  });\n\n  server.begin();\n}\n\nvoid loop() {}` }\n  ];\n\n  const piCards = [\n    { id: \"p1\", title: \"ultrasonic\", code: `import RPi.GPIO as GPIO...` },\n    { id: \"p2\", title: \"dht11\", code: \"from gpiozero import LED\" },\n    { id: \"p3\", title: \"servomotar\", code: \"from gpiozero import Button\" },\n    { id: \"p4\", title: \"rgb\", code: \"import RPi.GPIO as GPIO\" },\n    { id: \"p5\", title: \"soilmoisture\", code: \"...\" }\n  ];\n\n  const handleCopy = (text) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"cards-row\">\n        <div className=\"pi-group\">\n          {piCards.map((card) => (\n            <span \n              key={card.id}\n              className=\"card\"\n              onClick={() => handleCopy(card.code)}\n            >\n              {card.title}\n            </span>\n          ))}\n        </div>\n        <div className=\"arduino-group\">\n          {arduinoCards.map((card) => (\n            <span \n              key={card.id}\n              className=\"card\"\n              onClick={() => handleCopy(card.code)}\n            >\n              {card.title}\n            </span>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,YAAY,GAAG,CACnB;IAAEC,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAG,CAAC,EACA;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,OAAO;IAAEC,IAAI,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAG,CAAC,EACA;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;EAAM,CAAC,EAC9C;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,KAAK;IAAEC,IAAI,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAG,CAAC,EACA;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,cAAc;IAAEC,IAAI,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAgB,CAAC,CACd;EAED,MAAMC,OAAO,GAAG,CACd;IAAEH,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;EAA6B,CAAC,EACrE;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,OAAO;IAAEC,IAAI,EAAE;EAA2B,CAAC,EAC9D;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;EAA8B,CAAC,EACtE;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,KAAK;IAAEC,IAAI,EAAE;EAA0B,CAAC,EAC3D;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,cAAc;IAAEC,IAAI,EAAE;EAAM,CAAC,CACjD;EAED,MAAME,UAAU,GAAIC,IAAI,IAAK;IAC3BC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC;EACrC,CAAC;EAED,oBACER,OAAA;IAAKY,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBb,OAAA;MAAKY,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBb,OAAA;QAAKY,SAAS,EAAC,UAAU;QAAAC,QAAA,EACtBP,OAAO,CAACQ,GAAG,CAAEC,IAAI,iBAChBf,OAAA;UAEEY,SAAS,EAAC,MAAM;UAChBI,OAAO,EAAEA,CAAA,KAAMT,UAAU,CAACQ,IAAI,CAACV,IAAI,CAAE;UAAAQ,QAAA,EAEpCE,IAAI,CAACX;QAAK,GAJNW,IAAI,CAACZ,EAAE;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNpB,OAAA;QAAKY,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC3BX,YAAY,CAACY,GAAG,CAAEC,IAAI,iBACrBf,OAAA;UAEEY,SAAS,EAAC,MAAM;UAChBI,OAAO,EAAEA,CAAA,KAAMT,UAAU,CAACQ,IAAI,CAACV,IAAI,CAAE;UAAAQ,QAAA,EAEpCE,IAAI,CAACX;QAAK,GAJNW,IAAI,CAACZ,EAAE;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GAhUIpB,GAAG;AAkUT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}