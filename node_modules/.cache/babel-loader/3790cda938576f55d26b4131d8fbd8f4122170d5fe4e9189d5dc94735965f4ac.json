{"ast":null,"code":"var _jsxFileName = \"D:\\\\3-2\\\\IOT\\\\IOTLAB\\\\react-web-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const arduinoCards = [{\n    id: \"a1\",\n    title: \"ultrasonic\",\n    code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n  }, {\n    id: \"a2\",\n    title: \"dht11\",\n    code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n#include \"DHT.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define DHTPIN 4\n#define DHTTYPE DHT11\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n    Serial.begin(115200);\n    dht.begin();\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    float h = dht.readHumidity();\n    float t = dht.readTemperature();\n\n    if (isnan(h) || isnan(t)) {\n        Serial.println(\"Failed to read from DHT sensor!\");\n        delay(2000);\n        return;\n    }\n\n    Serial.print(\"Humidity: \");\n    Serial.print(h);\n    Serial.print(\" %\\t\");\n    Serial.print(\"Temperature: \");\n    Serial.println(t);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, h);\n    ThingSpeak.setField(2, t);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n  }, {\n    id: \"a4\",\n    title: \"4LED WEB\",\n    code: `#include <WiFi.h>\n#include <WebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJDC2408\";\n\nWebServer server(80);\n\nconst int ledPins[] = {13, 12, 14, 25};\nconst int numLeds = 4;\n\nvoid setupPins() {\n  for (int i = 0; i < numLeds; i++) {\n    pinMode(ledPins[i], OUTPUT);\n    digitalWrite(ledPins[i], LOW);\n  }\n}\n\nvoid handleRoot() {\n  String html = \"<h1>ESP32 LED Control</h1>\";\n  for (int i = 0; i < numLeds; i++) {\n    html += \"LED\" + String(ledPins[i]) + \": \";\n    html += \"<a href=\\\"/on?pin=\" + String(ledPins[i]) + \"\\\"><button>ON</button></a>\";\n    html += \"<a href=\\\"/off?pin=\" + String(ledPins[i]) + \"\\\"><button>OFF</button></a><br><br>\";\n  }\n  server.send(200, \"text/html\", html);\n}\n\nvoid handleLEDOn() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, HIGH);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is ON.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid handleLEDOff() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, LOW);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is OFF.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  setupPins();\n\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to Wi-Fi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nConnected to Wi-Fi.\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", handleRoot);\n  server.on(\"/on\", handleLEDOn);\n  server.on(\"/off\", handleLEDOff);\n\n  server.begin();\n  Serial.println(\"HTTP server started.\");\n}\n\nvoid loop() {\n  server.handleClient();\n}`\n  }, {\n    id: \"a5\",\n    title: \"soilmoisture\",\n    code: `#include <WiFi.h>\n#include <AsyncTCP.h>\n#include <ESPAsyncWebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJOC20483\";\n\nint sensorPin = 36;\nconst int redPin = 23;\nconst int greenPin = 22;\nconst int bluePin = 21;\n\nAsyncWebServer server(80);\n\nString getMoistureData() {\n  int sensorValue = analogRead(sensorPin);\n  int moisturePercent = map(sensorValue, 4095, 1000, 0, 100);\n  \n  String color = \"none\";\n  String status = \"unknown\";\n\n  if (moisturePercent < 10) {\n    color = \"red\";\n    status = \"Dry\";\n    digitalWrite(redPin, HIGH);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, LOW);\n  } else if (moisturePercent > 10 && moisturePercent < 50) {\n    color = \"blue\";\n    status = \"Moderate\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, HIGH);\n  } else if (moisturePercent >= 50) {\n    color = \"green\";\n    status = \"Wet\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, HIGH);\n    digitalWrite(bluePin, LOW);\n  }\n\n  String response = \"<h1>Soil Moisture: \" + String(moisturePercent) + \"% (\" + status + \")</h1>\";\n  response += \"<div style='width: 100%; height:100px; background-color:\" + color + \"'></div>\";\n  \n  return response;\n}\n\nvoid setup() {\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  Serial.begin(115200);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"Connected to WiFi\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", HTTP_GET, [](AsyncWebServerRequest *request){\n    String html = \"<html><head><meta http-equiv='refresh' content='5'></head><body>\";\n    html += getMoistureData();\n    html += \"</body></html>\";\n    request->send(200, \"text/html\", html);\n  });\n\n  server.begin();\n}\n\nvoid loop() {}`\n  }, {\n    id: \"a6\",\n    title: \"coap-client\",\n    code: `#include <WiFi.h>\n#include <WiFiUdp.h>\n#include <coap-simple.h>\n#include <DHT.h>\n\nconst char* ssid = \"Shruti\";\nconst char* password = \"chammu shruthi\";\nconst char* NODEID = \"NODE-01\";\n\nIPAddress coapServer(192, 168, 0, 101);\n\nWiFiUDP udp;\nCoap coapClient(udp);\n\n#define DHTPIN 4\n#define DHTTYPE DHT22\nDHT dht(DHTPIN, DHTTYPE);\n\n#define MOISTURE_SENSOR_PIN 34\n\nvoid callback_response(CoapPacket &packet, IPAddress ip, int port) {\n  Serial.println(\"[CoAP Response Received]\");\n  char p_packet[packet.payloadlen + 1];\n  memcpy(p_packet, packet.payload, packet.payloadlen);\n  p_packet[packet.payloadlen] = '\\0';\n  Serial.println(p_packet);\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.println(\"WiFi Connected!\");\n  Serial.println(\"IP Address: \" + WiFi.localIP().toString());\n  dht.begin();\n  pinMode(MOISTURE_SENSOR_PIN, INPUT);\n  coapClient.response(callback_response);\n  coapClient.start();\n}\n\nvoid loop() {\n  float temperature = dht.readTemperature();\n  float humidity = dht.readHumidity();\n  int moisture = analogRead(MOISTURE_SENSOR_PIN);\n\n  if (isnan(temperature) || isnan(humidity)) {\n    Serial.println(\"Failed to read from DHT sensor!\");\n    return;\n  }\n\n  String payload = \"{\";\n  payload += \"\\\"id\\\":\\\"\" + String(NODEID) + \"\\\",\";\n  payload += \"\\\"temperature\\\":\" + String(temperature) + \",\";\n  payload += \"\\\"humidity\\\":\" + String(humidity) + \",\";\n  payload += \"\\\"moisture\\\":\" + String(moisture);\n  payload += \"}\";\n\n  coapClient.send(coapServer, 5683, \"sensor\", COAP_NONCON, COAP_PUT, NULL, 0, (uint8_t*)payload.c_str(), payload.length());\n  Serial.println(\"Sent CoAP data to the server: \" + payload);\n\n  delay(5000);\n}`\n  }];\n  const piCards = [{\n    id: \"p1\",\n    title: \"ultrasonic\",\n    code: `from flask import Flask, render_template_string\nimport lgpio\nimport time\nimport threading\nimport atexit\n\nTRIG = 17\nECHO = 27\n\nh = lgpio.gpiochip_open(0)\nlgpio.gpio_claim_output(h, TRIG)\nlgpio.gpio_claim_input(h, ECHO)\n\ndistance_data = []\n\ndef measure_distance():\n    global distance_data\n    while True:\n        lgpio.gpio_write(h, TRIG, 1)\n        time.sleep(0.00001)\n        lgpio.gpio_write(h, TRIG, 0)\n\n        while lgpio.gpio_read(h, ECHO) == 0:\n            pulse_start = time.time()\n\n        while lgpio.gpio_read(h, ECHO) == 1:\n            pulse_end = time.time()\n\n        pulse_duration = pulse_end - pulse_start\n        distance = (pulse_duration * 34300) / 2\n\n        if len(distance_data) >= 20:\n            distance_data.pop(0)\n        distance_data.append(round(distance, 1))\n\n        time.sleep(1)\n\napp = Flask(_name_)\n\n@app.route('/')\ndef index():\n    return render_template_string('''\n    <h1>Ultrasonic Distance Sensor with Chart</h1>\n    <canvas id=\"distanceChart\" width=\"400\" height=\"200\"></canvas>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n    async function fetchData() {\n        const response = await fetch('/distance');\n        const data = await response.json();\n        return data;\n    }\n\n    async function updateChart(chart) {\n        const data = await fetchData();\n        chart.data.labels.push(new Date().toLocaleTimeString());\n        chart.data.datasets[0].data.push(data.distance);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n        }\n        chart.update();\n    }\n\n    const ctx = document.getElementById('distanceChart').getContext('2d');\n    const distanceChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [],\n            datasets: [{\n                label: 'Distance (cm)',\n                data: [],\n                borderColor: 'rgb(75, 192, 192)',\n                tension: 0.1\n            }]\n        }\n    });\n\n    setInterval(() => updateChart(distanceChart), 1000);\n    </script>\n    ''')\n\n@app.route('/distance')\ndef get_distance():\n    if distance_data:\n        return {'distance': distance_data[-1]}\n    return {'distance': 0.0}\n\ndef cleanup_gpio():\n    lgpio.gpiochip_close(h)\n\natexit.register(cleanup_gpio)\n\nif _name_ == '_main_':\n    threading.Thread(target=measure_distance, daemon=True).start()\n    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)`\n  }, {\n    id: \"p2\",\n    title: \"dht11\",\n    code: `import time\nimport board\nimport adafruit_dht\nimport requests\n\nsensor = adafruit_dht.DHT11(board.D4)\n\nTHINGSPEAK_URL = \"https://api.thingspeak.com/update\"\nAPI_KEY = \"YOUR_API_KEY_HERE\"\n\nwhile True:\n    try:\n        temperature = sensor.temperature\n        humidity = sensor.humidity\n\n        if temperature is not None and humidity is not None:\n            print(f\"Temperature: {temperature}°C, Humidity: {humidity}%\")\n\n            payload = {\n                'api_key': API_KEY,\n                'field1': temperature,\n                'field2': humidity\n            }\n\n            response = requests.post(THINGSPEAK_URL, params=payload)\n\n            if response.status_code == 200:\n                print(\"Data sent to ThingSpeak successfully\")\n            else:\n                print(f\"Failed to send data. Status code: {response.status_code}\")\n        time.sleep(15)\n    except RuntimeError as error:\n        print(\"Reading error:\", error.args[0])\n        time.sleep(3)`\n  }, {\n    id: \"p3\",\n    title: \"servomotar\",\n    code: `from flask import Flask, render_template, request\nimport lgpio\n\napp = Flask(_name_)\n\nservo_pin = 4\nh = lgpio.gpiochip_open(0)\nlgpio.gpio_claim_output(h, servo_pin)\n\nfrequency_hz = 50\nmin_duty = 2.5\nmax_duty = 12.5\n\ndef set_angle(angle):\n    duty_cycle = min_duty + (angle / 180) * (max_duty - min_duty)\n    lgpio.tx_pwm(h, servo_pin, frequency_hz, duty_cycle)\n\n@app.route('/')\ndef index():\n    return render_template('servoindex.html')\n\n@app.route('/control', methods=['POST'])\ndef control():\n    try:\n        angle = int(request.form['angle'])\n        if 0 <= angle <= 180:\n            set_angle(angle)\n            return f\"Servo moved to {angle} degrees\"\n        else:\n            return \"Invalid angle! Enter a value between 0 and 180.\"\n    except ValueError:\n        return \"Invalid input! Please enter a number.\"\n\nif _name_ == \"_main_\":\n    try:\n        app.run(host='0.0.0.0', port=5001, debug=False)\n    except KeyboardInterrupt:\n        print(\"Program terminated by user.\")\n    finally:\n        lgpio.tx_pwm(h, servo_pin, frequency_hz, 0)\n        lgpio.gpio_free(h, servo_pin)\n        lgpio.gpiochip_close(h)`\n  }, {\n    id: \"p4\",\n    title: \"rgb\",\n    code: `from flask import Flask, render_template, request\nimport lgpio\nimport signal\nimport sys\n\napp = Flask(_name_)\n\nRED_PIN, GREEN_PIN, BLUE_PIN = 17, 22, 24\n\nh = lgpio.gpiochip_open(0)\nlgpio.gpio_claim_output(h, RED_PIN)\nlgpio.gpio_claim_output(h, GREEN_PIN)\nlgpio.gpio_claim_output(h, BLUE_PIN)\n\ndef set_color(r, g, b):\n    lgpio.tx_pwm(h, RED_PIN, 100, r)\n    lgpio.tx_pwm(h, GREEN_PIN, 100, g)\n    lgpio.tx_pwm(h, BLUE_PIN, 100, b)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/set-color', methods=['POST'])\ndef set_color_route():\n    r, g, b = int(request.form['r']), int(request.form['g']), int(request.form['b'])\n    set_color(r, g, b)\n    return \"OK\"\n\ndef cleanup(signum, frame):\n    print(\"Cleaning up GPIOs before exit...\")\n    lgpio.gpiochip_close(h)\n    sys.exit(0)\n\nsignal.signal(signal.SIGINT, cleanup)\nsignal.signal(signal.SIGTERM, cleanup)\n\nif _name_ == \"_main_\":\n    try:\n        app.run(host=\"0.0.0.0\", port=5000)\n    finally:\n        cleanup(None, None)`\n  }, {\n    id: \"p6\",\n    title: \"coap-server\",\n    code: `import asyncio\nfrom aiocoap import *\nfrom aiocoap.resource import Resource, Site\n\nclass CoAPServer(Resource):\n    async def render_post(self, request):\n        received_data = request.payload.decode()\n        print(f\"Received data: {received_data}\")\n        return Message(code=CHANGED, payload=b\"Data Received\")\n\nasync def main():\n    root = Site()\n    root.add_resource(('sensor',), CoAPServer())\n    await Context.create_server_context(root)\n    await asyncio.get_running_loop().create_future()\n\nif _name_ == \"_main_\":\n    asyncio.run(main())`\n  }];\n  const handleCopy = text => {\n    // Format the code with proper indentation\n    const formattedCode = text.split('\\n').map(line => {\n      // Preserve existing indentation\n      const indentMatch = line.match(/^(\\s+)/);\n      const indent = indentMatch ? indentMatch[0] : '';\n      return indent + line.trim();\n    }).join('\\n');\n    navigator.clipboard.writeText(formattedCode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\",\n      alt: \"Google\",\n      className: \"google-logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pi-group\",\n        children: piCards.map(card => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"card\",\n          onClick: () => handleCopy(card.code),\n          children: card.title\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arduino-group\",\n        children: arduinoCards.map(card => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"card\",\n          onClick: () => handleCopy(card.code),\n          children: card.title\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 607,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","arduinoCards","id","title","code","piCards","handleCopy","text","formattedCode","split","map","line","indentMatch","match","indent","trim","join","navigator","clipboard","writeText","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","card","onClick","_c","$RefreshReg$"],"sources":["D:/3-2/IOT/IOTLAB/react-web-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const arduinoCards = [\n    { id: \"a1\", title: \"ultrasonic\", code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}` },\n    { id: \"a2\", title: \"dht11\", code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n#include \"DHT.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define DHTPIN 4\n#define DHTTYPE DHT11\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n    Serial.begin(115200);\n    dht.begin();\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    float h = dht.readHumidity();\n    float t = dht.readTemperature();\n\n    if (isnan(h) || isnan(t)) {\n        Serial.println(\"Failed to read from DHT sensor!\");\n        delay(2000);\n        return;\n    }\n\n    Serial.print(\"Humidity: \");\n    Serial.print(h);\n    Serial.print(\" %\\t\");\n    Serial.print(\"Temperature: \");\n    Serial.println(t);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, h);\n    ThingSpeak.setField(2, t);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}` },\n  \n    { id: \"a4\", title: \"4LED WEB\", code: `#include <WiFi.h>\n#include <WebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJDC2408\";\n\nWebServer server(80);\n\nconst int ledPins[] = {13, 12, 14, 25};\nconst int numLeds = 4;\n\nvoid setupPins() {\n  for (int i = 0; i < numLeds; i++) {\n    pinMode(ledPins[i], OUTPUT);\n    digitalWrite(ledPins[i], LOW);\n  }\n}\n\nvoid handleRoot() {\n  String html = \"<h1>ESP32 LED Control</h1>\";\n  for (int i = 0; i < numLeds; i++) {\n    html += \"LED\" + String(ledPins[i]) + \": \";\n    html += \"<a href=\\\"/on?pin=\" + String(ledPins[i]) + \"\\\"><button>ON</button></a>\";\n    html += \"<a href=\\\"/off?pin=\" + String(ledPins[i]) + \"\\\"><button>OFF</button></a><br><br>\";\n  }\n  server.send(200, \"text/html\", html);\n}\n\nvoid handleLEDOn() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, HIGH);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is ON.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid handleLEDOff() {\n  if (server.hasArg(\"pin\")) {\n    int pin = server.arg(\"pin\").toInt();\n    digitalWrite(pin, LOW);\n    server.send(200, \"text/html\", \"LED\" + String(pin) + \" is OFF.<br><a href=\\\"/\\\">Back</a>\");\n  } else {\n    server.send(400, \"text/html\", \"Missing pin argument.<br><a href=\\\"/\\\">Back</a>\");\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  setupPins();\n\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to Wi-Fi...\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nConnected to Wi-Fi.\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", handleRoot);\n  server.on(\"/on\", handleLEDOn);\n  server.on(\"/off\", handleLEDOff);\n\n  server.begin();\n  Serial.println(\"HTTP server started.\");\n}\n\nvoid loop() {\n  server.handleClient();\n}` },\n    { id: \"a5\", title: \"soilmoisture\", code: `#include <WiFi.h>\n#include <AsyncTCP.h>\n#include <ESPAsyncWebServer.h>\n\nconst char* ssid = \"Rajakumar\";\nconst char* password = \"KJOC20483\";\n\nint sensorPin = 36;\nconst int redPin = 23;\nconst int greenPin = 22;\nconst int bluePin = 21;\n\nAsyncWebServer server(80);\n\nString getMoistureData() {\n  int sensorValue = analogRead(sensorPin);\n  int moisturePercent = map(sensorValue, 4095, 1000, 0, 100);\n  \n  String color = \"none\";\n  String status = \"unknown\";\n\n  if (moisturePercent < 10) {\n    color = \"red\";\n    status = \"Dry\";\n    digitalWrite(redPin, HIGH);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, LOW);\n  } else if (moisturePercent > 10 && moisturePercent < 50) {\n    color = \"blue\";\n    status = \"Moderate\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, LOW);\n    digitalWrite(bluePin, HIGH);\n  } else if (moisturePercent >= 50) {\n    color = \"green\";\n    status = \"Wet\";\n    digitalWrite(redPin, LOW);\n    digitalWrite(greenPin, HIGH);\n    digitalWrite(bluePin, LOW);\n  }\n\n  String response = \"<h1>Soil Moisture: \" + String(moisturePercent) + \"% (\" + status + \")</h1>\";\n  response += \"<div style='width: 100%; height:100px; background-color:\" + color + \"'></div>\";\n  \n  return response;\n}\n\nvoid setup() {\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  Serial.begin(115200);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n  Serial.println(\"Connected to WiFi\");\n  Serial.println(WiFi.localIP());\n\n  server.on(\"/\", HTTP_GET, [](AsyncWebServerRequest *request){\n    String html = \"<html><head><meta http-equiv='refresh' content='5'></head><body>\";\n    html += getMoistureData();\n    html += \"</body></html>\";\n    request->send(200, \"text/html\", html);\n  });\n\n  server.begin();\n}\n\nvoid loop() {}` },\n    { id: \"a6\", title: \"coap-client\", code: `#include <WiFi.h>\n#include <WiFiUdp.h>\n#include <coap-simple.h>\n#include <DHT.h>\n\nconst char* ssid = \"Shruti\";\nconst char* password = \"chammu shruthi\";\nconst char* NODEID = \"NODE-01\";\n\nIPAddress coapServer(192, 168, 0, 101);\n\nWiFiUDP udp;\nCoap coapClient(udp);\n\n#define DHTPIN 4\n#define DHTTYPE DHT22\nDHT dht(DHTPIN, DHTTYPE);\n\n#define MOISTURE_SENSOR_PIN 34\n\nvoid callback_response(CoapPacket &packet, IPAddress ip, int port) {\n  Serial.println(\"[CoAP Response Received]\");\n  char p_packet[packet.payloadlen + 1];\n  memcpy(p_packet, packet.payload, packet.payloadlen);\n  p_packet[packet.payloadlen] = '\\0';\n  Serial.println(p_packet);\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.println(\"WiFi Connected!\");\n  Serial.println(\"IP Address: \" + WiFi.localIP().toString());\n  dht.begin();\n  pinMode(MOISTURE_SENSOR_PIN, INPUT);\n  coapClient.response(callback_response);\n  coapClient.start();\n}\n\nvoid loop() {\n  float temperature = dht.readTemperature();\n  float humidity = dht.readHumidity();\n  int moisture = analogRead(MOISTURE_SENSOR_PIN);\n\n  if (isnan(temperature) || isnan(humidity)) {\n    Serial.println(\"Failed to read from DHT sensor!\");\n    return;\n  }\n\n  String payload = \"{\";\n  payload += \"\\\"id\\\":\\\"\" + String(NODEID) + \"\\\",\";\n  payload += \"\\\"temperature\\\":\" + String(temperature) + \",\";\n  payload += \"\\\"humidity\\\":\" + String(humidity) + \",\";\n  payload += \"\\\"moisture\\\":\" + String(moisture);\n  payload += \"}\";\n\n  coapClient.send(coapServer, 5683, \"sensor\", COAP_NONCON, COAP_PUT, NULL, 0, (uint8_t*)payload.c_str(), payload.length());\n  Serial.println(\"Sent CoAP data to the server: \" + payload);\n\n  delay(5000);\n}` }\n  ];\n\n  const piCards = [\n  \n    { id: \"p1\", title: \"ultrasonic\", code: `from flask import Flask, render_template_string\nimport lgpio\nimport time\nimport threading\nimport atexit\n\nTRIG = 17\nECHO = 27\n\nh = lgpio.gpiochip_open(0)\nlgpio.gpio_claim_output(h, TRIG)\nlgpio.gpio_claim_input(h, ECHO)\n\ndistance_data = []\n\ndef measure_distance():\n    global distance_data\n    while True:\n        lgpio.gpio_write(h, TRIG, 1)\n        time.sleep(0.00001)\n        lgpio.gpio_write(h, TRIG, 0)\n\n        while lgpio.gpio_read(h, ECHO) == 0:\n            pulse_start = time.time()\n\n        while lgpio.gpio_read(h, ECHO) == 1:\n            pulse_end = time.time()\n\n        pulse_duration = pulse_end - pulse_start\n        distance = (pulse_duration * 34300) / 2\n\n        if len(distance_data) >= 20:\n            distance_data.pop(0)\n        distance_data.append(round(distance, 1))\n\n        time.sleep(1)\n\napp = Flask(_name_)\n\n@app.route('/')\ndef index():\n    return render_template_string('''\n    <h1>Ultrasonic Distance Sensor with Chart</h1>\n    <canvas id=\"distanceChart\" width=\"400\" height=\"200\"></canvas>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n    async function fetchData() {\n        const response = await fetch('/distance');\n        const data = await response.json();\n        return data;\n    }\n\n    async function updateChart(chart) {\n        const data = await fetchData();\n        chart.data.labels.push(new Date().toLocaleTimeString());\n        chart.data.datasets[0].data.push(data.distance);\n\n        if (chart.data.labels.length > 20) {\n            chart.data.labels.shift();\n            chart.data.datasets[0].data.shift();\n        }\n        chart.update();\n    }\n\n    const ctx = document.getElementById('distanceChart').getContext('2d');\n    const distanceChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [],\n            datasets: [{\n                label: 'Distance (cm)',\n                data: [],\n                borderColor: 'rgb(75, 192, 192)',\n                tension: 0.1\n            }]\n        }\n    });\n\n    setInterval(() => updateChart(distanceChart), 1000);\n    </script>\n    ''')\n\n@app.route('/distance')\ndef get_distance():\n    if distance_data:\n        return {'distance': distance_data[-1]}\n    return {'distance': 0.0}\n\ndef cleanup_gpio():\n    lgpio.gpiochip_close(h)\n\natexit.register(cleanup_gpio)\n\nif _name_ == '_main_':\n    threading.Thread(target=measure_distance, daemon=True).start()\n    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)` },\n    { id: \"p2\", title: \"dht11\", code: `import time\nimport board\nimport adafruit_dht\nimport requests\n\nsensor = adafruit_dht.DHT11(board.D4)\n\nTHINGSPEAK_URL = \"https://api.thingspeak.com/update\"\nAPI_KEY = \"YOUR_API_KEY_HERE\"\n\nwhile True:\n    try:\n        temperature = sensor.temperature\n        humidity = sensor.humidity\n\n        if temperature is not None and humidity is not None:\n            print(f\"Temperature: {temperature}°C, Humidity: {humidity}%\")\n\n            payload = {\n                'api_key': API_KEY,\n                'field1': temperature,\n                'field2': humidity\n            }\n\n            response = requests.post(THINGSPEAK_URL, params=payload)\n\n            if response.status_code == 200:\n                print(\"Data sent to ThingSpeak successfully\")\n            else:\n                print(f\"Failed to send data. Status code: {response.status_code}\")\n        time.sleep(15)\n    except RuntimeError as error:\n        print(\"Reading error:\", error.args[0])\n        time.sleep(3)` },\n    { id: \"p3\", title: \"servomotar\", code: `from flask import Flask, render_template, request\nimport lgpio\n\napp = Flask(_name_)\n\nservo_pin = 4\nh = lgpio.gpiochip_open(0)\nlgpio.gpio_claim_output(h, servo_pin)\n\nfrequency_hz = 50\nmin_duty = 2.5\nmax_duty = 12.5\n\ndef set_angle(angle):\n    duty_cycle = min_duty + (angle / 180) * (max_duty - min_duty)\n    lgpio.tx_pwm(h, servo_pin, frequency_hz, duty_cycle)\n\n@app.route('/')\ndef index():\n    return render_template('servoindex.html')\n\n@app.route('/control', methods=['POST'])\ndef control():\n    try:\n        angle = int(request.form['angle'])\n        if 0 <= angle <= 180:\n            set_angle(angle)\n            return f\"Servo moved to {angle} degrees\"\n        else:\n            return \"Invalid angle! Enter a value between 0 and 180.\"\n    except ValueError:\n        return \"Invalid input! Please enter a number.\"\n\nif _name_ == \"_main_\":\n    try:\n        app.run(host='0.0.0.0', port=5001, debug=False)\n    except KeyboardInterrupt:\n        print(\"Program terminated by user.\")\n    finally:\n        lgpio.tx_pwm(h, servo_pin, frequency_hz, 0)\n        lgpio.gpio_free(h, servo_pin)\n        lgpio.gpiochip_close(h)` },\n    { id: \"p4\", title: \"rgb\", code: `from flask import Flask, render_template, request\nimport lgpio\nimport signal\nimport sys\n\napp = Flask(_name_)\n\nRED_PIN, GREEN_PIN, BLUE_PIN = 17, 22, 24\n\nh = lgpio.gpiochip_open(0)\nlgpio.gpio_claim_output(h, RED_PIN)\nlgpio.gpio_claim_output(h, GREEN_PIN)\nlgpio.gpio_claim_output(h, BLUE_PIN)\n\ndef set_color(r, g, b):\n    lgpio.tx_pwm(h, RED_PIN, 100, r)\n    lgpio.tx_pwm(h, GREEN_PIN, 100, g)\n    lgpio.tx_pwm(h, BLUE_PIN, 100, b)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/set-color', methods=['POST'])\ndef set_color_route():\n    r, g, b = int(request.form['r']), int(request.form['g']), int(request.form['b'])\n    set_color(r, g, b)\n    return \"OK\"\n\ndef cleanup(signum, frame):\n    print(\"Cleaning up GPIOs before exit...\")\n    lgpio.gpiochip_close(h)\n    sys.exit(0)\n\nsignal.signal(signal.SIGINT, cleanup)\nsignal.signal(signal.SIGTERM, cleanup)\n\nif _name_ == \"_main_\":\n    try:\n        app.run(host=\"0.0.0.0\", port=5000)\n    finally:\n        cleanup(None, None)` },\n    {\n      id: \"p6\", \n      title: \"coap-server\", \n      code: `import asyncio\nfrom aiocoap import *\nfrom aiocoap.resource import Resource, Site\n\nclass CoAPServer(Resource):\n    async def render_post(self, request):\n        received_data = request.payload.decode()\n        print(f\"Received data: {received_data}\")\n        return Message(code=CHANGED, payload=b\"Data Received\")\n\nasync def main():\n    root = Site()\n    root.add_resource(('sensor',), CoAPServer())\n    await Context.create_server_context(root)\n    await asyncio.get_running_loop().create_future()\n\nif _name_ == \"_main_\":\n    asyncio.run(main())`\n    }\n  ];\n\n  const handleCopy = (text) => {\n    // Format the code with proper indentation\n    const formattedCode = text\n      .split('\\n')\n      .map(line => {\n        // Preserve existing indentation\n        const indentMatch = line.match(/^(\\s+)/);\n        const indent = indentMatch ? indentMatch[0] : '';\n        return indent + line.trim();\n      })\n      .join('\\n');\n\n    navigator.clipboard.writeText(formattedCode);\n  };\n\n  return (\n    <div className=\"container\">\n      <img \n        src=\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\" \n        alt=\"Google\" \n        className=\"google-logo\"\n      />\n      <div className=\"search-box\">\n        {/* This is just for visual effect */}\n      </div>\n      <div className=\"cards-row\">\n        <div className=\"pi-group\">\n          {piCards.map((card) => (\n            <span \n              key={card.id}\n              className=\"card\"\n              onClick={() => handleCopy(card.code)}\n            >\n              {card.title}\n            </span>\n          ))}\n        </div>\n        <div className=\"arduino-group\">\n          {arduinoCards.map((card) => (\n            <span \n              key={card.id}\n              className=\"card\"\n              onClick={() => handleCopy(card.code)}\n            >\n              {card.title}\n            </span>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,YAAY,GAAG,CACnB;IAAEC,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAG,CAAC,EACA;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,OAAO;IAAEC,IAAI,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAG,CAAC,EAEA;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,UAAU;IAAEC,IAAI,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAG,CAAC,EACA;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,cAAc;IAAEC,IAAI,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAgB,CAAC,EACb;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,aAAa;IAAEC,IAAI,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAG,CAAC,CACD;EAED,MAAMC,OAAO,GAAG,CAEd;IAAEH,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAwE,CAAC,EACrE;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,OAAO;IAAEC,IAAI,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAuB,CAAC,EACpB;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,YAAY;IAAEC,IAAI,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAAiC,CAAC,EAC9B;IAAEF,EAAE,EAAE,IAAI;IAAEC,KAAK,EAAE,KAAK;IAAEC,IAAI,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAA6B,CAAC,EAC1B;IACEF,EAAE,EAAE,IAAI;IACRC,KAAK,EAAE,aAAa;IACpBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CACF;EAED,MAAME,UAAU,GAAIC,IAAI,IAAK;IAC3B;IACA,MAAMC,aAAa,GAAGD,IAAI,CACvBE,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAACC,IAAI,IAAI;MACX;MACA,MAAMC,WAAW,GAAGD,IAAI,CAACE,KAAK,CAAC,QAAQ,CAAC;MACxC,MAAMC,MAAM,GAAGF,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE;MAChD,OAAOE,MAAM,GAAGH,IAAI,CAACI,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CACDC,IAAI,CAAC,IAAI,CAAC;IAEbC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACX,aAAa,CAAC;EAC9C,CAAC;EAED,oBACET,OAAA;IAAKqB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBtB,OAAA;MACEuB,GAAG,EAAC,oFAAoF;MACxFC,GAAG,EAAC,QAAQ;MACZH,SAAS,EAAC;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF5B,OAAA;MAAKqB,SAAS,EAAC;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEtB,CAAC,eACN5B,OAAA;MAAKqB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBtB,OAAA;QAAKqB,SAAS,EAAC,UAAU;QAAAC,QAAA,EACtBhB,OAAO,CAACK,GAAG,CAAEkB,IAAI,iBAChB7B,OAAA;UAEEqB,SAAS,EAAC,MAAM;UAChBS,OAAO,EAAEA,CAAA,KAAMvB,UAAU,CAACsB,IAAI,CAACxB,IAAI,CAAE;UAAAiB,QAAA,EAEpCO,IAAI,CAACzB;QAAK,GAJNyB,IAAI,CAAC1B,EAAE;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN5B,OAAA;QAAKqB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC3BpB,YAAY,CAACS,GAAG,CAAEkB,IAAI,iBACrB7B,OAAA;UAEEqB,SAAS,EAAC,MAAM;UAChBS,OAAO,EAAEA,CAAA,KAAMvB,UAAU,CAACsB,IAAI,CAACxB,IAAI,CAAE;UAAAiB,QAAA,EAEpCO,IAAI,CAACzB;QAAK,GAJNyB,IAAI,CAAC1B,EAAE;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKR,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,EAAA,GA9nBI9B,GAAG;AAgoBT,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}