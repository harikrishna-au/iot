{"ast":null,"code":"var _jsxFileName = \"D:\\\\3-2\\\\IOT\\\\IOTLAB\\\\react-web-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const arduinoCards = [{\n    id: 1,\n    title: \"UltraSonic Sensor{THINGSPEAK}\",\n    code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n  }, {\n    id: 2,\n    title: \"Analog Read\",\n    code: \"int sensorValue = analogRead(A0);\\nSerial.println(sensorValue);\"\n  }, {\n    id: 3,\n    title: \"Serial Read\",\n    code: \"if (Serial.available() > 0) {\\n  int data = Serial.read();\\n}\"\n  }, {\n    id: 4,\n    title: \"Servo Control\",\n    code: \"#include <Servo.h>\\nServo myservo;\\nmyservo.write(90);\"\n  }, {\n    id: 5,\n    title: \"Digital Write\",\n    code: \"digitalWrite(7, HIGH);\\ndelay(500);\\ndigitalWrite(7, LOW);\"\n  }];\n  const piCards = [{\n    id: 1,\n    title: \"Ultrasonic Sensor\",\n    code: `import RPi.GPIO as GPIO\nimport time\n\nTRIG_PIN = 23\nECHO_PIN = 24\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(TRIG_PIN, GPIO.OUT)\nGPIO.setup(ECHO_PIN, GPIO.IN)\n\ndef get_distance():\n    GPIO.output(TRIG_PIN, False)\n    time.sleep(0.2)\n    GPIO.output(TRIG_PIN, True)\n    time.sleep(0.00001)\n    GPIO.output(TRIG_PIN, False)\n\n    while GPIO.input(ECHO_PIN) == 0:\n        pulse_start = time.time()\n\n    while GPIO.input(ECHO_PIN) == 1:\n        pulse_end = time.time()\n\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    distance = round(distance, 2)\n    return distance\n\ntry:\n    while True:\n        dist = get_distance()\n        print(f\"Distance: {dist} cm\")\n        time.sleep(1)\nexcept:\n    GPIO.cleanup()`\n  }, {\n    id: 2,\n    title: \"LED Control\",\n    code: \"from gpiozero import LED\\nled = LED(17)\\nled.on()\"\n  }, {\n    id: 3,\n    title: \"Button Input\",\n    code: \"from gpiozero import Button\\nbutton = Button(2)\\nbutton.wait_for_press()\"\n  }, {\n    id: 4,\n    title: \"PWM Output\",\n    code: \"import RPi.GPIO as GPIO\\nGPIO.setmode(GPIO.BCM)\\nGPIO.setup(18, GPIO.OUT)\\npwm = GPIO.PWM(18, 100)\"\n  }, {\n    id: 5,\n    title: \"Servo Control\",\n    code: \"from gpiozero import Servo\\nservo = Servo(17)\\nservo.mid()\"\n  }];\n  const handleCopy = text => {\n    navigator.clipboard.writeText(text);\n    alert(\"Code copied!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"row-title\",\n        children: \"Arduino Examples\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-row\",\n        children: arduinoCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card arduino\",\n          onClick: () => handleCopy(card.code),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: card.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: card.code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this)]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"row-title\",\n        children: \"Raspberry Pi Examples\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-row\",\n        children: piCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card raspberry-pi\",\n          onClick: () => handleCopy(card.code),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: card.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: card.code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","arduinoCards","id","title","code","piCards","handleCopy","text","navigator","clipboard","writeText","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","card","onClick","_c","$RefreshReg$"],"sources":["D:/3-2/IOT/IOTLAB/react-web-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const arduinoCards = [\n    {\n      id: 1,\n      title: \"UltraSonic Sensor{THINGSPEAK}\",\n      code: `#include <WiFi.h>\n#include \"ThingSpeak.h\"\n\n#define SECRET_SSID \"YourWiFiSSID\"\n#define SECRET_PASS \"YourWiFiPassword\"\n#define SECRET_CH_ID 1234567\n#define SECRET_WRITE_APIKEY \"YOUR_API_KEY\"\n\nchar ssid[] = SECRET_SSID;\nchar pass[] = SECRET_PASS;\nWiFiClient client;\nunsigned long myChannelNumber = SECRET_CH_ID;\nconst char *myWriteAPIKey = SECRET_WRITE_APIKEY;\n\n#define TRIG_PIN 22\n#define ECHO_PIN 23\n#define SOUND_VELOCITY 0.034\n#define CM_TO_INCH 0.393701\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(TRIG_PIN, OUTPUT);\n    pinMode(ECHO_PIN, INPUT);\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, pass);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n    }\n    ThingSpeak.begin(client);\n}\n\nvoid loop() {\n    digitalWrite(TRIG_PIN, LOW);\n    delayMicroseconds(2);\n    digitalWrite(TRIG_PIN, HIGH);\n    delayMicroseconds(10);\n    digitalWrite(TRIG_PIN, LOW);\n\n    long duration = pulseIn(ECHO_PIN, HIGH);\n    float distanceCm = duration * SOUND_VELOCITY / 2;\n    float distanceInch = distanceCm * CM_TO_INCH;\n\n    Serial.print(\"Distance (cm): \");\n    Serial.println(distanceCm);\n    Serial.print(\"Distance (inch): \");\n    Serial.println(distanceInch);\n\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pass);\n        delay(5000);\n        return;\n    }\n\n    ThingSpeak.setField(1, distanceCm);\n    ThingSpeak.setField(2, distanceInch);\n\n    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n    if (x == 200) {\n        Serial.println(\"Channel update successful.\");\n    } else {\n        Serial.print(\"Problem updating channel. HTTP error code: \");\n        Serial.println(x);\n    }\n    delay(20000);\n}`\n    },\n    {\n      id: 2,\n      title: \"Analog Read\",\n      code: \"int sensorValue = analogRead(A0);\\nSerial.println(sensorValue);\"\n    },\n    {\n      id: 3,\n      title: \"Serial Read\",\n      code: \"if (Serial.available() > 0) {\\n  int data = Serial.read();\\n}\"\n    },\n    {\n      id: 4,\n      title: \"Servo Control\",\n      code: \"#include <Servo.h>\\nServo myservo;\\nmyservo.write(90);\"\n    },\n    {\n      id: 5,\n      title: \"Digital Write\",\n      code: \"digitalWrite(7, HIGH);\\ndelay(500);\\ndigitalWrite(7, LOW);\"\n    }\n  ];\n\n  const piCards = [\n    {\n      id: 1,\n      title: \"Ultrasonic Sensor\",\n      code: `import RPi.GPIO as GPIO\nimport time\n\nTRIG_PIN = 23\nECHO_PIN = 24\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(TRIG_PIN, GPIO.OUT)\nGPIO.setup(ECHO_PIN, GPIO.IN)\n\ndef get_distance():\n    GPIO.output(TRIG_PIN, False)\n    time.sleep(0.2)\n    GPIO.output(TRIG_PIN, True)\n    time.sleep(0.00001)\n    GPIO.output(TRIG_PIN, False)\n\n    while GPIO.input(ECHO_PIN) == 0:\n        pulse_start = time.time()\n\n    while GPIO.input(ECHO_PIN) == 1:\n        pulse_end = time.time()\n\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    distance = round(distance, 2)\n    return distance\n\ntry:\n    while True:\n        dist = get_distance()\n        print(f\"Distance: {dist} cm\")\n        time.sleep(1)\nexcept:\n    GPIO.cleanup()`\n    },\n    {\n      id: 2,\n      title: \"LED Control\",\n      code: \"from gpiozero import LED\\nled = LED(17)\\nled.on()\"\n    },\n    {\n      id: 3,\n      title: \"Button Input\",\n      code: \"from gpiozero import Button\\nbutton = Button(2)\\nbutton.wait_for_press()\"\n    },\n    {\n      id: 4,\n      title: \"PWM Output\",\n      code: \"import RPi.GPIO as GPIO\\nGPIO.setmode(GPIO.BCM)\\nGPIO.setup(18, GPIO.OUT)\\npwm = GPIO.PWM(18, 100)\"\n    },\n    {\n      id: 5,\n      title: \"Servo Control\",\n      code: \"from gpiozero import Servo\\nservo = Servo(17)\\nservo.mid()\"\n    }\n  ];\n\n  const handleCopy = (text) => {\n    navigator.clipboard.writeText(text);\n    alert(\"Code copied!\");\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h2 className=\"row-title\">Arduino Examples</h2>\n        <div className=\"cards-row\">\n          {arduinoCards.map((card) => (\n            <div key={card.id} className=\"card arduino\" onClick={() => handleCopy(card.code)}>\n              <h3>{card.title}</h3>\n              <pre><code>{card.code}</code></pre>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"row\">\n        <h2 className=\"row-title\">Raspberry Pi Examples</h2>\n        <div className=\"cards-row\">\n          {piCards.map((card) => (\n            <div key={card.id} className=\"card raspberry-pi\" onClick={() => handleCopy(card.code)}>\n              <h3>{card.title}</h3>\n              <pre><code>{card.code}</code></pre>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,YAAY,GAAG,CACnB;IACEC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,+BAA+B;IACtCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,eAAe;IACtBC,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,eAAe;IACtBC,IAAI,EAAE;EACR,CAAC,CACF;EAED,MAAMC,OAAO,GAAG,CACd;IACEH,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,mBAAmB;IAC1BC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,IAAI,EAAE;EACR,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}